[
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "BaseAsyncJsonWebsocketConsumer",
        "importPath": "helper.consumers",
        "description": "helper.consumers",
        "isExtraImport": true,
        "detail": "helper.consumers",
        "documentation": {}
    },
    {
        "label": "BaseAsyncJsonWebsocketConsumer",
        "importPath": "helper.consumers",
        "description": "helper.consumers",
        "isExtraImport": true,
        "detail": "helper.consumers",
        "documentation": {}
    },
    {
        "label": "database_sync_to_async",
        "importPath": "channels.db",
        "description": "channels.db",
        "isExtraImport": true,
        "detail": "channels.db",
        "documentation": {}
    },
    {
        "label": "database_sync_to_async",
        "importPath": "channels.db",
        "description": "channels.db",
        "isExtraImport": true,
        "detail": "channels.db",
        "documentation": {}
    },
    {
        "label": "database_sync_to_async",
        "importPath": "channels.db",
        "description": "channels.db",
        "isExtraImport": true,
        "detail": "channels.db",
        "documentation": {}
    },
    {
        "label": "UserStatus",
        "importPath": "Users.models",
        "description": "Users.models",
        "isExtraImport": true,
        "detail": "Users.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "Users.models",
        "description": "Users.models",
        "isExtraImport": true,
        "detail": "Users.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "Users.models",
        "description": "Users.models",
        "isExtraImport": true,
        "detail": "Users.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "Users.models",
        "description": "Users.models",
        "isExtraImport": true,
        "detail": "Users.models",
        "documentation": {}
    },
    {
        "label": "UserDetail",
        "importPath": "Users.models",
        "description": "Users.models",
        "isExtraImport": true,
        "detail": "Users.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "Users.models",
        "description": "Users.models",
        "isExtraImport": true,
        "detail": "Users.models",
        "documentation": {}
    },
    {
        "label": "UserStatus",
        "importPath": "Users.models",
        "description": "Users.models",
        "isExtraImport": true,
        "detail": "Users.models",
        "documentation": {}
    },
    {
        "label": "Follow",
        "importPath": "Users.models",
        "description": "Users.models",
        "isExtraImport": true,
        "detail": "Users.models",
        "documentation": {}
    },
    {
        "label": "Follow",
        "importPath": "Users.models",
        "description": "Users.models",
        "isExtraImport": true,
        "detail": "Users.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "Users.models",
        "description": "Users.models",
        "isExtraImport": true,
        "detail": "Users.models",
        "documentation": {}
    },
    {
        "label": "UserDetail",
        "importPath": "Users.models",
        "description": "Users.models",
        "isExtraImport": true,
        "detail": "Users.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "Users.models",
        "description": "Users.models",
        "isExtraImport": true,
        "detail": "Users.models",
        "documentation": {}
    },
    {
        "label": "rest_framework",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "rest_framework",
        "description": "rest_framework",
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "filters",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "django.db",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db",
        "description": "django.db",
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "Creation",
        "importPath": "helper.models",
        "description": "helper.models",
        "isExtraImport": true,
        "detail": "helper.models",
        "documentation": {}
    },
    {
        "label": "UIID",
        "importPath": "helper.models",
        "description": "helper.models",
        "isExtraImport": true,
        "detail": "helper.models",
        "documentation": {}
    },
    {
        "label": "Creation",
        "importPath": "helper.models",
        "description": "helper.models",
        "isExtraImport": true,
        "detail": "helper.models",
        "documentation": {}
    },
    {
        "label": "Creation",
        "importPath": "helper.models",
        "description": "helper.models",
        "isExtraImport": true,
        "detail": "helper.models",
        "documentation": {}
    },
    {
        "label": "UIID",
        "importPath": "helper.models",
        "description": "helper.models",
        "isExtraImport": true,
        "detail": "helper.models",
        "documentation": {}
    },
    {
        "label": "Creation",
        "importPath": "helper.models",
        "description": "helper.models",
        "isExtraImport": true,
        "detail": "helper.models",
        "documentation": {}
    },
    {
        "label": "UIID",
        "importPath": "helper.models",
        "description": "helper.models",
        "isExtraImport": true,
        "detail": "helper.models",
        "documentation": {}
    },
    {
        "label": "humanize",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "humanize",
        "description": "humanize",
        "detail": "humanize",
        "documentation": {}
    },
    {
        "label": "Chat",
        "importPath": "Chats.models",
        "description": "Chats.models",
        "isExtraImport": true,
        "detail": "Chats.models",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "TripSample",
        "importPath": "Explore.models",
        "description": "Explore.models",
        "isExtraImport": true,
        "detail": "Explore.models",
        "documentation": {}
    },
    {
        "label": "TripSample",
        "importPath": "Explore.models",
        "description": "Explore.models",
        "isExtraImport": true,
        "detail": "Explore.models",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "SampleTripSerializer",
        "importPath": "Explore.serializers",
        "description": "Explore.serializers",
        "isExtraImport": true,
        "detail": "Explore.serializers",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "Ping",
        "importPath": "Extra.models",
        "description": "Extra.models",
        "isExtraImport": true,
        "detail": "Extra.models",
        "documentation": {}
    },
    {
        "label": "Ping",
        "importPath": "Extra.models",
        "description": "Extra.models",
        "isExtraImport": true,
        "detail": "Extra.models",
        "documentation": {}
    },
    {
        "label": "Ping",
        "importPath": "Extra.models",
        "description": "Extra.models",
        "isExtraImport": true,
        "detail": "Extra.models",
        "documentation": {}
    },
    {
        "label": "Ping",
        "importPath": "Extra.models",
        "description": "Extra.models",
        "isExtraImport": true,
        "detail": "Extra.models",
        "documentation": {}
    },
    {
        "label": "UserFullDetailsSerializer",
        "importPath": "Users.serializers",
        "description": "Users.serializers",
        "isExtraImport": true,
        "detail": "Users.serializers",
        "documentation": {}
    },
    {
        "label": "UserFullDetailsSerializer",
        "importPath": "Users.serializers",
        "description": "Users.serializers",
        "isExtraImport": true,
        "detail": "Users.serializers",
        "documentation": {}
    },
    {
        "label": "UserStatusSerializer",
        "importPath": "Users.serializers",
        "description": "Users.serializers",
        "isExtraImport": true,
        "detail": "Users.serializers",
        "documentation": {}
    },
    {
        "label": "PingsListView",
        "importPath": "Extra.views",
        "description": "Extra.views",
        "isExtraImport": true,
        "detail": "Extra.views",
        "documentation": {}
    },
    {
        "label": "PingsSetSeenView",
        "importPath": "Extra.views",
        "description": "Extra.views",
        "isExtraImport": true,
        "detail": "Extra.views",
        "documentation": {}
    },
    {
        "label": "ListAPIView",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "UpdateAPIView",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "RetrieveAPIView",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "UpdateAPIView",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "ListCreateAPIView",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "ListAPIView",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "CreateAPIView",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "UpdateAPIView",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "ListAPIView",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "PingSerializer",
        "importPath": "Extra.serializers",
        "description": "Extra.serializers",
        "isExtraImport": true,
        "detail": "Extra.serializers",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "Trip",
        "importPath": "Trips.models",
        "description": "Trips.models",
        "isExtraImport": true,
        "detail": "Trips.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "Trips.models",
        "description": "Trips.models",
        "isExtraImport": true,
        "detail": "Trips.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "Trips.models",
        "description": "Trips.models",
        "isExtraImport": true,
        "detail": "Trips.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "Trips.models",
        "description": "Trips.models",
        "isExtraImport": true,
        "detail": "Trips.models",
        "documentation": {}
    },
    {
        "label": "fake_trips",
        "importPath": "FakeDataGenarator.fake_data",
        "description": "FakeDataGenarator.fake_data",
        "isExtraImport": true,
        "detail": "FakeDataGenarator.fake_data",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "ContentFile",
        "importPath": "django.core.files.base",
        "description": "django.core.files.base",
        "isExtraImport": true,
        "detail": "django.core.files.base",
        "documentation": {}
    },
    {
        "label": "AsyncJsonWebsocketConsumer",
        "importPath": "channels.generic.websocket",
        "description": "channels.generic.websocket",
        "isExtraImport": true,
        "detail": "channels.generic.websocket",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "ProtocolTypeRouter",
        "importPath": "channels.routing",
        "description": "channels.routing",
        "isExtraImport": true,
        "detail": "channels.routing",
        "documentation": {}
    },
    {
        "label": "URLRouter",
        "importPath": "channels.routing",
        "description": "channels.routing",
        "isExtraImport": true,
        "detail": "channels.routing",
        "documentation": {}
    },
    {
        "label": "AllowedHostsOriginValidator",
        "importPath": "channels.security.websocket",
        "description": "channels.security.websocket",
        "isExtraImport": true,
        "detail": "channels.security.websocket",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "ws_urlpatterns",
        "importPath": "travelmatesb.urls",
        "description": "travelmatesb.urls",
        "isExtraImport": true,
        "detail": "travelmatesb.urls",
        "documentation": {}
    },
    {
        "label": "WsAuthMiddleware",
        "importPath": "Users.ws_auth_middleware",
        "description": "Users.ws_auth_middleware",
        "isExtraImport": true,
        "detail": "Users.ws_auth_middleware",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "UserStatusConsumer",
        "importPath": "Users.consumers",
        "description": "Users.consumers",
        "isExtraImport": true,
        "detail": "Users.consumers",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "helper.validations",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "helper.validations",
        "description": "helper.validations",
        "detail": "helper.validations",
        "documentation": {}
    },
    {
        "label": "validate_trip_image_size",
        "importPath": "helper.validations",
        "description": "helper.validations",
        "isExtraImport": true,
        "detail": "helper.validations",
        "documentation": {}
    },
    {
        "label": "validate_image_dimensions",
        "importPath": "helper.validations",
        "description": "helper.validations",
        "isExtraImport": true,
        "detail": "helper.validations",
        "documentation": {}
    },
    {
        "label": "validate_image_size",
        "importPath": "helper.validations",
        "description": "helper.validations",
        "isExtraImport": true,
        "detail": "helper.validations",
        "documentation": {}
    },
    {
        "label": "LIKE_CHOICES",
        "importPath": "helper.choices",
        "description": "helper.choices",
        "isExtraImport": true,
        "detail": "helper.choices",
        "documentation": {}
    },
    {
        "label": "TRIP_CATEGORIES",
        "importPath": "helper.choices",
        "description": "helper.choices",
        "isExtraImport": true,
        "detail": "helper.choices",
        "documentation": {}
    },
    {
        "label": "TRIP_CATEGORIES",
        "importPath": "helper.choices",
        "description": "helper.choices",
        "isExtraImport": true,
        "detail": "helper.choices",
        "documentation": {}
    },
    {
        "label": "get_user_name",
        "importPath": "helper.functions",
        "description": "helper.functions",
        "isExtraImport": true,
        "detail": "helper.functions",
        "documentation": {}
    },
    {
        "label": "django.contrib.humanize.templatetags.humanize",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.humanize.templatetags.humanize",
        "description": "django.contrib.humanize.templatetags.humanize",
        "detail": "django.contrib.humanize.templatetags.humanize",
        "documentation": {}
    },
    {
        "label": "naturaltime",
        "importPath": "django.contrib.humanize.templatetags.humanize",
        "description": "django.contrib.humanize.templatetags.humanize",
        "isExtraImport": true,
        "detail": "django.contrib.humanize.templatetags.humanize",
        "documentation": {}
    },
    {
        "label": "post_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "pre_delete",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "post_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "pre_delete",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "Trips.serializers",
        "description": "Trips.serializers",
        "isExtraImport": true,
        "detail": "Trips.serializers",
        "documentation": {}
    },
    {
        "label": "TripSerializer",
        "importPath": "Trips.serializers",
        "description": "Trips.serializers",
        "isExtraImport": true,
        "detail": "Trips.serializers",
        "documentation": {}
    },
    {
        "label": "DjangoFilterBackend",
        "importPath": "django_filters.rest_framework",
        "description": "django_filters.rest_framework",
        "isExtraImport": true,
        "detail": "django_filters.rest_framework",
        "documentation": {}
    },
    {
        "label": "BaseUserManager",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractBaseUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "PermissionsMixin",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "RefreshToken",
        "importPath": "rest_framework_simplejwt.tokens",
        "description": "rest_framework_simplejwt.tokens",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.tokens",
        "documentation": {}
    },
    {
        "label": "AccessToken",
        "importPath": "rest_framework_simplejwt.tokens",
        "description": "rest_framework_simplejwt.tokens",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.tokens",
        "documentation": {}
    },
    {
        "label": "UserTripsView",
        "importPath": "Trips.views",
        "description": "Trips.views",
        "isExtraImport": true,
        "detail": "Trips.views",
        "documentation": {}
    },
    {
        "label": "TokenRefreshView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenBlacklistView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "PermissionDenied",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "ChatsConfig",
        "kind": 6,
        "importPath": "Chats.apps",
        "description": "Chats.apps",
        "peekOfCode": "class ChatsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'Chats'",
        "detail": "Chats.apps",
        "documentation": {}
    },
    {
        "label": "ChatConsumer",
        "kind": 6,
        "importPath": "Chats.consumers",
        "description": "Chats.consumers",
        "peekOfCode": "class ChatConsumer(BaseAsyncJsonWebsocketConsumer):\n    groups = []\n    async def connect(self):\n        if await self.user_connect():\n            pass\n    async def receive_json(self, content, **kwargs):\n        pass\n    @database_sync_to_async\n    def get_user_chats(self):\n        chats = self.user.user_chats_From.all() | self.user.user_chats_to.all()",
        "detail": "Chats.consumers",
        "documentation": {}
    },
    {
        "label": "Chat",
        "kind": 6,
        "importPath": "Chats.models",
        "description": "Chats.models",
        "peekOfCode": "class Chat(Creation, UIID):\n    from_user = models.ForeignKey(User, related_name= 'user_chats_from', to_field='email', on_delete= models.CASCADE) \n    to_user = models.ForeignKey(User, related_name= 'user_chats_to', to_field='email', on_delete= models.CASCADE)\nclass Message(Creation, UIID):\n    chat = models.ForeignKey(Chat, to_field='uiid', on_delete=models.CASCADE)\n    user = models.ForeignKey(User, related_name= 'travel_mate_messages', to_field='travel_mate_id', on_delete= models.CASCADE) \n    user_name = models.CharField(max_length=50)\n    message = models.TextField()\n    status = models.BooleanField(default='', blank = True)\n    def save(self, *args, **kwargs):",
        "detail": "Chats.models",
        "documentation": {}
    },
    {
        "label": "Message",
        "kind": 6,
        "importPath": "Chats.models",
        "description": "Chats.models",
        "peekOfCode": "class Message(Creation, UIID):\n    chat = models.ForeignKey(Chat, to_field='uiid', on_delete=models.CASCADE)\n    user = models.ForeignKey(User, related_name= 'travel_mate_messages', to_field='travel_mate_id', on_delete= models.CASCADE) \n    user_name = models.CharField(max_length=50)\n    message = models.TextField()\n    status = models.BooleanField(default='', blank = True)\n    def save(self, *args, **kwargs):\n        if self.user:\n            self.user_name = self.user.user_details.nick_name\n        return super().save(*args, **kwargs)",
        "detail": "Chats.models",
        "documentation": {}
    },
    {
        "label": "ChatSerializer",
        "kind": 6,
        "importPath": "Chats.serializers",
        "description": "Chats.serializers",
        "peekOfCode": "class ChatSerializer(serializers.ModelSerializer):\n    time = serializers.SerializerMethodField(read_only=True)\n    def get_time(self, obj):\n        return humanize.naturaltime(obj.created_at)\n    class Meta:\n        model = Chat\n        exclude = ['id']\nclass MessageSerializer(serializers.ModelSerializer):\n    time = serializers.SerializerMethodField(read_only=True)\n    def get_time(self, obj):",
        "detail": "Chats.serializers",
        "documentation": {}
    },
    {
        "label": "MessageSerializer",
        "kind": 6,
        "importPath": "Chats.serializers",
        "description": "Chats.serializers",
        "peekOfCode": "class MessageSerializer(serializers.ModelSerializer):\n    time = serializers.SerializerMethodField(read_only=True)\n    def get_time(self, obj):\n        return humanize.naturaltime(obj.created_at)\n    class Meta:\n        model = Chat\n        exclude = ['id']",
        "detail": "Chats.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "Chats.ws_urls",
        "description": "Chats.ws_urls",
        "peekOfCode": "urlpatterns = [\n]",
        "detail": "Chats.ws_urls",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "Explore.migrations.0001_initial",
        "description": "Explore.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='TripSample',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),",
        "detail": "Explore.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "ExploreConfig",
        "kind": 6,
        "importPath": "Explore.apps",
        "description": "Explore.apps",
        "peekOfCode": "class ExploreConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'Explore'",
        "detail": "Explore.apps",
        "documentation": {}
    },
    {
        "label": "TripSample",
        "kind": 6,
        "importPath": "Explore.models",
        "description": "Explore.models",
        "peekOfCode": "class TripSample(models.Model):\n    title = models.CharField(max_length = 200)\n    image_url = models.URLField()\n    content = models.TextField()\n    category = models.CharField(max_length=200)",
        "detail": "Explore.models",
        "documentation": {}
    },
    {
        "label": "SampleTripSerializer",
        "kind": 6,
        "importPath": "Explore.serializers",
        "description": "Explore.serializers",
        "peekOfCode": "class SampleTripSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = TripSample\n        exclude =['category']",
        "detail": "Explore.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "Explore.urls",
        "description": "Explore.urls",
        "peekOfCode": "urlpatterns = [\n    path('sample_trips/<str:category>',TripSampleDataView.as_view()),\n    path('categories',TripSampleCategoryView.as_view())\n]",
        "detail": "Explore.urls",
        "documentation": {}
    },
    {
        "label": "TripSampleDataView",
        "kind": 6,
        "importPath": "Explore.views",
        "description": "Explore.views",
        "peekOfCode": "class TripSampleDataView(APIView):\n    def get(self, request, category=None):\n        sample_qry = TripSample.objects.filter(category = category)\n        sample_trip_data = SampleTripSerializer(sample_qry,many=True).data\n        return Response(sample_trip_data)\nclass TripSampleCategoryView(APIView):\n    def get(self, request):\n        categories = TripSample.objects.values_list('category', flat=True).order_by('category').distinct()\n        data = []\n        for category in categories:",
        "detail": "Explore.views",
        "documentation": {}
    },
    {
        "label": "TripSampleCategoryView",
        "kind": 6,
        "importPath": "Explore.views",
        "description": "Explore.views",
        "peekOfCode": "class TripSampleCategoryView(APIView):\n    def get(self, request):\n        categories = TripSample.objects.values_list('category', flat=True).order_by('category').distinct()\n        data = []\n        for category in categories:\n            data.append(\n                {\n                    'category': category,\n                    'label': category.title(),\n                    'cover' : TripSample.objects.filter(category = category).order_by('?').first().image_url,",
        "detail": "Explore.views",
        "documentation": {}
    },
    {
        "label": "countries_info",
        "kind": 5,
        "importPath": "Explore.views",
        "description": "Explore.views",
        "peekOfCode": "countries_info = {\n    'Australia': {\n        'Location': 'Oceania',\n        'Capital': 'Canberra',\n        'Known_for': 'Great Barrier Reef, Sydney Opera House, unique wildlife'\n    },\n    'Canada': {\n        'Location': 'North America',\n        'Capital': 'Ottawa',\n        'Known_for': 'Beautiful landscapes, maple syrup, diverse cities'",
        "detail": "Explore.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "Extra.migrations.0001_initial",
        "description": "Extra.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Ping',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "Extra.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "ExtraConfig",
        "kind": 6,
        "importPath": "Extra.apps",
        "description": "Extra.apps",
        "peekOfCode": "class ExtraConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'Extra'",
        "detail": "Extra.apps",
        "documentation": {}
    },
    {
        "label": "Ping",
        "kind": 6,
        "importPath": "Extra.models",
        "description": "Extra.models",
        "peekOfCode": "class Ping(Creation):\n    label = models.CharField(max_length=250)\n    redirect_path = models.CharField(max_length=250)\n    user = models.ForeignKey(User, related_name = 'user_pings', to_field = 'email', on_delete=models.CASCADE)\n    user_by = models.ForeignKey(User, to_field = 'email', on_delete=models.CASCADE)\n    is_seen = models.BooleanField(default=False)",
        "detail": "Extra.models",
        "documentation": {}
    },
    {
        "label": "PingSerializer",
        "kind": 6,
        "importPath": "Extra.serializers",
        "description": "Extra.serializers",
        "peekOfCode": "class PingSerializer(serializers.ModelSerializer):\n    def __init__(self, *args, **kwargs):\n        # Extract the context from the keyword arguments\n        context = kwargs.get('context', None)\n        # Call the super constructor\n        super().__init__(*args, **kwargs)\n        # Pass the context to the nested serializer\n        if context:\n            self.fields['user_by'] = UserFullDetailsSerializer(context=context)\n    user_by = UserFullDetailsSerializer(read_only = True)",
        "detail": "Extra.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "Extra.urls",
        "description": "Extra.urls",
        "peekOfCode": "urlpatterns = [\n    path('pings', PingsListView.as_view()),\n    path('pings-set-seen', PingsSetSeenView.as_view())\n]",
        "detail": "Extra.urls",
        "documentation": {}
    },
    {
        "label": "PingsListView",
        "kind": 6,
        "importPath": "Extra.views",
        "description": "Extra.views",
        "peekOfCode": "class PingsListView(ListAPIView):\n    serializer_class = PingSerializer\n    queryset = Ping.objects.all()\n    def get(self, request):\n        user = request.user\n        pings = Ping.objects.filter(user=user, is_seen = False)\n        data = self.get_serializer(pings, many = True).data\n        return Response(data, 200)\nclass PingsSetSeenView(UpdateAPIView):\n    serializer_class = PingSerializer",
        "detail": "Extra.views",
        "documentation": {}
    },
    {
        "label": "PingsSetSeenView",
        "kind": 6,
        "importPath": "Extra.views",
        "description": "Extra.views",
        "peekOfCode": "class PingsSetSeenView(UpdateAPIView):\n    serializer_class = PingSerializer\n    queryset = Ping.objects.all()\n    def update(self, request):\n        user = request.user\n        pings = Ping.objects.filter(user=user, is_seen = False)\n        pings.update(is_seen = True)\n        return Response(None, 200)",
        "detail": "Extra.views",
        "documentation": {}
    },
    {
        "label": "FakedatagenaratorConfig",
        "kind": 6,
        "importPath": "FakeDataGenarator.apps",
        "description": "FakeDataGenarator.apps",
        "peekOfCode": "class FakedatagenaratorConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'FakeDataGenarator'",
        "detail": "FakeDataGenarator.apps",
        "documentation": {}
    },
    {
        "label": "fake_trips",
        "kind": 5,
        "importPath": "FakeDataGenarator.fake_data",
        "description": "FakeDataGenarator.fake_data",
        "peekOfCode": "fake_trips = [\n    {\n        \"user\": \"madhu@gmail.com\",\n        \"title\": \"Adventure Trek in Himalayas\",\n        \"address_from\": \"Manali, Himachal Pradesh\",\n        \"address_to\": \"Auli, Uttarakhand\",\n        \"category\": \"adventure\",\n        \"date\": \"2024-07-15\",\n        \"time\": \"08:00\",\n        \"group_size\": 5,",
        "detail": "FakeDataGenarator.fake_data",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "FakeDataGenarator.urls",
        "description": "FakeDataGenarator.urls",
        "peekOfCode": "urlpatterns = [\n     path('explore_sample_trip_data', ExploreTripSampleData.as_view()),\n     path('fake_trips', TripsFakeData.as_view())\n]",
        "detail": "FakeDataGenarator.urls",
        "documentation": {}
    },
    {
        "label": "ExploreTripSampleData",
        "kind": 6,
        "importPath": "FakeDataGenarator.views",
        "description": "FakeDataGenarator.views",
        "peekOfCode": "class ExploreTripSampleData(APIView):\n    def get(self, request):\n        with open('trips.json', 'r', encoding='utf-8') as file:\n            trip_sample_data = json.load(file)\n        for trip_sample in trip_sample_data:\n            modal_data = {\n                'title': ''.join(trip_sample['title'].split('. ')[1:]),\n                'content': trip_sample['content'],\n                'image_url': trip_sample['image'],\n                'category': trip_sample['contry'],",
        "detail": "FakeDataGenarator.views",
        "documentation": {}
    },
    {
        "label": "TripsFakeData",
        "kind": 6,
        "importPath": "FakeDataGenarator.views",
        "description": "FakeDataGenarator.views",
        "peekOfCode": "class TripsFakeData(APIView):\n    def get(self, request):\n        Trip.objects.all().delete()  # This line will delete all existing trips in each iteration. Consider moving it outside the loop if you only want to delete them once.\n        for trip_data in fake_trips:\n            response = requests.get(trip_data['trip_cover_img'])\n            trip_data['user'] = User.objects.get(email=trip_data['user'])\n            trip = Trip(\n                user=trip_data['user'],\n                title=trip_data['title'],\n                address_from=trip_data['address_from'],",
        "detail": "FakeDataGenarator.views",
        "documentation": {}
    },
    {
        "label": "TRIP_CATEGORIES",
        "kind": 5,
        "importPath": "helper.choices",
        "description": "helper.choices",
        "peekOfCode": "TRIP_CATEGORIES = [\n    ('adventure', 'Adventure'),\n    ('education', 'Education'),\n    ('cultural', 'Cultural'),\n    ('nature', 'Nature'),\n    ('wellness', 'Wellness'),\n    ('historical', 'Historical'),\n    ('culinary', 'Culinary'),\n    ('volunteer', 'Volunteer'),\n    ('wildlife', 'Wildlife'),",
        "detail": "helper.choices",
        "documentation": {}
    },
    {
        "label": "LIKE_CHOICES",
        "kind": 5,
        "importPath": "helper.choices",
        "description": "helper.choices",
        "peekOfCode": "LIKE_CHOICES = [\n    ('like', 'like'),\n    ('dislike', 'dislike'),\n]",
        "detail": "helper.choices",
        "documentation": {}
    },
    {
        "label": "BaseAsyncJsonWebsocketConsumer",
        "kind": 6,
        "importPath": "helper.consumers",
        "description": "helper.consumers",
        "peekOfCode": "class BaseAsyncJsonWebsocketConsumer(AsyncJsonWebsocketConsumer):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n    async def user_connect(self):\n        user = self.scope.get('user')\n        if user is None:\n            await self.close(code=4403)  \n            return False\n        else:\n            await self.accept()",
        "detail": "helper.consumers",
        "documentation": {}
    },
    {
        "label": "get_user_name",
        "kind": 2,
        "importPath": "helper.functions",
        "description": "helper.functions",
        "peekOfCode": "def get_user_name(user):\n    user_detail = UserDetail.objects.get(user=user)\n    return user_detail.nick_name",
        "detail": "helper.functions",
        "documentation": {}
    },
    {
        "label": "Creation",
        "kind": 6,
        "importPath": "helper.models",
        "description": "helper.models",
        "peekOfCode": "class Creation(models.Model):\n    created_at = models.DateTimeField(auto_now_add=True)\n    class Meta:\n        abstract = True\nclass UIID(models.Model):\n    uiid = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    class Meta:\n        abstract = True",
        "detail": "helper.models",
        "documentation": {}
    },
    {
        "label": "UIID",
        "kind": 6,
        "importPath": "helper.models",
        "description": "helper.models",
        "peekOfCode": "class UIID(models.Model):\n    uiid = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    class Meta:\n        abstract = True",
        "detail": "helper.models",
        "documentation": {}
    },
    {
        "label": "validate_image_dimensions",
        "kind": 2,
        "importPath": "helper.validations",
        "description": "helper.validations",
        "peekOfCode": "def validate_image_dimensions(image):\n    width = image.width\n    height = image.height\n    # Check if image dimensions are at least 320x320 pixels\n    if width < 320 or height < 320:\n        raise ValidationError('Image dimensions should be at least 320x320 pixels.')\ndef validate_image_size(image):\n    # Check if image size is less than 5MB\n    if image.size > 5 * 1024 * 1024:\n        raise ValidationError('Image size should be less than 5MB.')",
        "detail": "helper.validations",
        "documentation": {}
    },
    {
        "label": "validate_image_size",
        "kind": 2,
        "importPath": "helper.validations",
        "description": "helper.validations",
        "peekOfCode": "def validate_image_size(image):\n    # Check if image size is less than 5MB\n    if image.size > 5 * 1024 * 1024:\n        raise ValidationError('Image size should be less than 5MB.')\ndef validate_trip_image_size(image):\n    # Check if image size is less than 5MB\n    if image.size > 5 * 1024 * 1024:\n        raise ValidationError('Image size should be less than 5MB.')",
        "detail": "helper.validations",
        "documentation": {}
    },
    {
        "label": "validate_trip_image_size",
        "kind": 2,
        "importPath": "helper.validations",
        "description": "helper.validations",
        "peekOfCode": "def validate_trip_image_size(image):\n    # Check if image size is less than 5MB\n    if image.size > 5 * 1024 * 1024:\n        raise ValidationError('Image size should be less than 5MB.')",
        "detail": "helper.validations",
        "documentation": {}
    },
    {
        "label": "django_asgi_app",
        "kind": 5,
        "importPath": "travelmatesb.asgi",
        "description": "travelmatesb.asgi",
        "peekOfCode": "django_asgi_app = get_asgi_application()\napplication = ProtocolTypeRouter(\n    {\n        \"http\": django_asgi_app,\n        \"websocket\": AllowedHostsOriginValidator(\n            WsAuthMiddleware(\n                URLRouter(ws_urlpatterns)\n            )\n        ),\n    }",
        "detail": "travelmatesb.asgi",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "travelmatesb.asgi",
        "description": "travelmatesb.asgi",
        "peekOfCode": "application = ProtocolTypeRouter(\n    {\n        \"http\": django_asgi_app,\n        \"websocket\": AllowedHostsOriginValidator(\n            WsAuthMiddleware(\n                URLRouter(ws_urlpatterns)\n            )\n        ),\n    }\n)",
        "detail": "travelmatesb.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "travelmatesb.settings",
        "description": "travelmatesb.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-1h7i9q1-h^35ni!1m7_2a*=md_xa^9yw%xfm(qu-#@ghw-7a7t'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [",
        "detail": "travelmatesb.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "travelmatesb.settings",
        "description": "travelmatesb.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-1h7i9q1-h^35ni!1m7_2a*=md_xa^9yw%xfm(qu-#@ghw-7a7t'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'daphne',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',",
        "detail": "travelmatesb.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "travelmatesb.settings",
        "description": "travelmatesb.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'daphne',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',",
        "detail": "travelmatesb.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "travelmatesb.settings",
        "description": "travelmatesb.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'daphne',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "travelmatesb.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "travelmatesb.settings",
        "description": "travelmatesb.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'daphne',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'corsheaders',\n    'rest_framework',",
        "detail": "travelmatesb.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "travelmatesb.settings",
        "description": "travelmatesb.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]",
        "detail": "travelmatesb.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOWED_ORIGINS",
        "kind": 5,
        "importPath": "travelmatesb.settings",
        "description": "travelmatesb.settings",
        "peekOfCode": "CORS_ALLOWED_ORIGINS = [\n   \"http://localhost:3000\",\n   \"http://localhost:8000\"\n]\nCORS_ALLOW_METHODS = (\n    \"DELETE\",\n    \"GET\",\n    \"OPTIONS\",\n    \"PATCH\",\n    \"PUT\",",
        "detail": "travelmatesb.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_METHODS",
        "kind": 5,
        "importPath": "travelmatesb.settings",
        "description": "travelmatesb.settings",
        "peekOfCode": "CORS_ALLOW_METHODS = (\n    \"DELETE\",\n    \"GET\",\n    \"OPTIONS\",\n    \"PATCH\",\n    \"PUT\",\n    \"POST\",\n)\nROOT_URLCONF = 'travelmatesb.urls'\nTEMPLATES = [",
        "detail": "travelmatesb.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "travelmatesb.settings",
        "description": "travelmatesb.settings",
        "peekOfCode": "ROOT_URLCONF = 'travelmatesb.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates/')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "travelmatesb.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "travelmatesb.settings",
        "description": "travelmatesb.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates/')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "travelmatesb.settings",
        "documentation": {}
    },
    {
        "label": "ASGI_APPLICATION",
        "kind": 5,
        "importPath": "travelmatesb.settings",
        "description": "travelmatesb.settings",
        "peekOfCode": "ASGI_APPLICATION = \"travelmatesb.asgi.application\"\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'travelmates',\n        'USER': 'postgres',\n        'PASSWORD': 'sunil',\n        'HOST': 'localhost',",
        "detail": "travelmatesb.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "travelmatesb.settings",
        "description": "travelmatesb.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'travelmates',\n        'USER': 'postgres',\n        'PASSWORD': 'sunil',\n        'HOST': 'localhost',\n        'PORT': 5432,\n    }\n}",
        "detail": "travelmatesb.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "travelmatesb.settings",
        "description": "travelmatesb.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "travelmatesb.settings",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT",
        "kind": 5,
        "importPath": "travelmatesb.settings",
        "description": "travelmatesb.settings",
        "peekOfCode": "SIMPLE_JWT = {\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(days=30),\n    \"REFRESH_TOKEN_LIFETIME\": timedelta(days=30),\n    \"ROTATE_REFRESH_TOKENS\": True,\n    \"BLACKLIST_AFTER_ROTATION\": True,\n    \"USER_ID_FIELD\": \"email\",\n    \"USER_ID_CLAIM\": \"email\",\n}\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (",
        "detail": "travelmatesb.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "travelmatesb.settings",
        "description": "travelmatesb.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    )\n}\nCHANNEL_LAYERS = {\n    \"default\": {\n        \"BACKEND\": \"channels_redis.core.RedisChannelLayer\",\n        \"CONFIG\": {\n            \"hosts\": [(\"127.0.0.1\", 6379)],",
        "detail": "travelmatesb.settings",
        "documentation": {}
    },
    {
        "label": "CHANNEL_LAYERS",
        "kind": 5,
        "importPath": "travelmatesb.settings",
        "description": "travelmatesb.settings",
        "peekOfCode": "CHANNEL_LAYERS = {\n    \"default\": {\n        \"BACKEND\": \"channels_redis.core.RedisChannelLayer\",\n        \"CONFIG\": {\n            \"hosts\": [(\"127.0.0.1\", 6379)],\n        },\n    },\n}\n# Internationalization\n# https://docs.djangoproject.com/en/5.0/topics/i18n/",
        "detail": "travelmatesb.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "travelmatesb.settings",
        "description": "travelmatesb.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'Asia/Kolkata'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static_root')\nMEDIA_URL = 'media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media/')",
        "detail": "travelmatesb.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "travelmatesb.settings",
        "description": "travelmatesb.settings",
        "peekOfCode": "TIME_ZONE = 'Asia/Kolkata'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static_root')\nMEDIA_URL = 'media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media/')\n# Default primary key field type",
        "detail": "travelmatesb.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "travelmatesb.settings",
        "description": "travelmatesb.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static_root')\nMEDIA_URL = 'media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media/')\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field",
        "detail": "travelmatesb.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "travelmatesb.settings",
        "description": "travelmatesb.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static_root')\nMEDIA_URL = 'media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media/')\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "travelmatesb.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "travelmatesb.settings",
        "description": "travelmatesb.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static_root')\nMEDIA_URL = 'media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media/')\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'Users.User'",
        "detail": "travelmatesb.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "travelmatesb.settings",
        "description": "travelmatesb.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR, 'static_root')\nMEDIA_URL = 'media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media/')\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'Users.User'",
        "detail": "travelmatesb.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "travelmatesb.settings",
        "description": "travelmatesb.settings",
        "peekOfCode": "MEDIA_URL = 'media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media/')\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'Users.User'",
        "detail": "travelmatesb.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "travelmatesb.settings",
        "description": "travelmatesb.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'Users.User'",
        "detail": "travelmatesb.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "travelmatesb.settings",
        "description": "travelmatesb.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'Users.User'",
        "detail": "travelmatesb.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "travelmatesb.settings",
        "description": "travelmatesb.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'Users.User'",
        "detail": "travelmatesb.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "travelmatesb.urls",
        "description": "travelmatesb.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/users/', include('Users.urls')),\n    path('api/',include('Trips.urls')),\n    path('api/explore/',include('Explore.urls')),\n    path('api/extra/',include('Extra.urls')),\n    path('fake_data/',include('FakeDataGenarator.urls')),\n]\nws_urlpatterns = [\n     path('ws/user-statuses', UserStatusConsumer.as_asgi())",
        "detail": "travelmatesb.urls",
        "documentation": {}
    },
    {
        "label": "ws_urlpatterns",
        "kind": 5,
        "importPath": "travelmatesb.urls",
        "description": "travelmatesb.urls",
        "peekOfCode": "ws_urlpatterns = [\n     path('ws/user-statuses', UserStatusConsumer.as_asgi())\n]\nif settings.DEBUG:\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)",
        "detail": "travelmatesb.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "travelmatesb.wsgi",
        "description": "travelmatesb.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "travelmatesb.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "Trips.migrations.0001_initial",
        "description": "Trips.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Trip',\n            fields=[\n                ('created_at', models.DateTimeField(auto_now_add=True)),",
        "detail": "Trips.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "Trips.migrations.0002_alter_trip_user_name",
        "description": "Trips.migrations.0002_alter_trip_user_name",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('Trips', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='trip',\n            name='user_name',\n            field=models.CharField(blank=True, max_length=30, null=True),\n        ),",
        "detail": "Trips.migrations.0002_alter_trip_user_name",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "Trips.migrations.0003_alter_trip_user",
        "description": "Trips.migrations.0003_alter_trip_user",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('Trips', '0002_alter_trip_user_name'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='trip',\n            name='user',\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_trips', to=settings.AUTH_USER_MODEL, to_field='email'),",
        "detail": "Trips.migrations.0003_alter_trip_user",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "Trips.migrations.0004_trip_time_alter_trip_date",
        "description": "Trips.migrations.0004_trip_time_alter_trip_date",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('Trips', '0003_alter_trip_user'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='trip',\n            name='time',\n            field=models.TimeField(default=datetime.time(22, 46, 20, 454731)),\n            preserve_default=False,",
        "detail": "Trips.migrations.0004_trip_time_alter_trip_date",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "Trips.migrations.0005_alter_trip_address_from_alter_trip_address_to",
        "description": "Trips.migrations.0005_alter_trip_address_from_alter_trip_address_to",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('Trips', '0004_trip_time_alter_trip_date'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='trip',\n            name='address_from',\n            field=models.CharField(max_length=100),\n        ),",
        "detail": "Trips.migrations.0005_alter_trip_address_from_alter_trip_address_to",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "Trips.migrations.0006_trip_trip_cover_img_alter_trip_group_size",
        "description": "Trips.migrations.0006_trip_trip_cover_img_alter_trip_group_size",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('Trips', '0005_alter_trip_address_from_alter_trip_address_to'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='trip',\n            name='trip_cover_img',\n            field=models.ImageField(blank=True, null=True, upload_to='trip_cover_images', validators=[helper.validations.validate_trip_image_size]),\n        ),",
        "detail": "Trips.migrations.0006_trip_trip_cover_img_alter_trip_group_size",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "Trips.migrations.0007_tripcomment_triplike_tripreplycomment_triprequest",
        "description": "Trips.migrations.0007_tripcomment_triplike_tripreplycomment_triprequest",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('Trips', '0006_trip_trip_cover_img_alter_trip_group_size'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='TripComment',\n            fields=[\n                ('created_at', models.DateTimeField(auto_now_add=True)),",
        "detail": "Trips.migrations.0007_tripcomment_triplike_tripreplycomment_triprequest",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "Trips.migrations.0008_alter_tripcomment_user_alter_triplike_user_and_more",
        "description": "Trips.migrations.0008_alter_tripcomment_user_alter_triplike_user_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('Trips', '0007_tripcomment_triplike_tripreplycomment_triprequest'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='tripcomment',\n            name='user',\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='commented_trips', to=settings.AUTH_USER_MODEL, to_field='email'),",
        "detail": "Trips.migrations.0008_alter_tripcomment_user_alter_triplike_user_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "Trips.migrations.0009_triplike_dis_like",
        "description": "Trips.migrations.0009_triplike_dis_like",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('Trips', '0008_alter_tripcomment_user_alter_triplike_user_and_more'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='triplike',\n            name='dis_like',\n            field=models.BooleanField(default=False),\n        ),",
        "detail": "Trips.migrations.0009_triplike_dis_like",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "Trips.migrations.0010_remove_triplike_dis_like_triplike_status",
        "description": "Trips.migrations.0010_remove_triplike_dis_like_triplike_status",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('Trips', '0009_triplike_dis_like'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='triplike',\n            name='dis_like',\n        ),\n        migrations.AddField(",
        "detail": "Trips.migrations.0010_remove_triplike_dis_like_triplike_status",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "Trips.migrations.0011_remove_trip_likes",
        "description": "Trips.migrations.0011_remove_trip_likes",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('Trips', '0010_remove_triplike_dis_like_triplike_status'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='trip',\n            name='likes',\n        ),\n    ]",
        "detail": "Trips.migrations.0011_remove_trip_likes",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "Trips.migrations.0012_trip_is_published_remove_trip_connected_users_and_more",
        "description": "Trips.migrations.0012_trip_is_published_remove_trip_connected_users_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('Trips', '0011_remove_trip_likes'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='trip',\n            name='is_published',\n            field=models.BooleanField(default=False),",
        "detail": "Trips.migrations.0012_trip_is_published_remove_trip_connected_users_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "Trips.migrations.0013_alter_trip_category",
        "description": "Trips.migrations.0013_alter_trip_category",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('Trips', '0012_trip_is_published_remove_trip_connected_users_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='trip',\n            name='category',\n            field=models.CharField(max_length=30),\n        ),",
        "detail": "Trips.migrations.0013_alter_trip_category",
        "documentation": {}
    },
    {
        "label": "TripsConfig",
        "kind": 6,
        "importPath": "Trips.apps",
        "description": "Trips.apps",
        "peekOfCode": "class TripsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'Trips'\n    def ready(self):\n        from . import signals",
        "detail": "Trips.apps",
        "documentation": {}
    },
    {
        "label": "Trip",
        "kind": 6,
        "importPath": "Trips.models",
        "description": "Trips.models",
        "peekOfCode": "class Trip(Creation, UIID):\n    title = models.CharField(max_length=100)\n    address_from = models.CharField(max_length=100)\n    address_to = models.CharField(max_length=100)\n    trip_cover_img = models.ImageField(upload_to='trip_cover_images', null=True, blank=True, validators=[validate_trip_image_size])\n    category = models.CharField(max_length=30)\n    date = models.DateField()\n    time = models.TimeField()\n    group_size = models.SmallIntegerField(default=2)\n    distance = models.IntegerField(null=True)",
        "detail": "Trips.models",
        "documentation": {}
    },
    {
        "label": "TripLike",
        "kind": 6,
        "importPath": "Trips.models",
        "description": "Trips.models",
        "peekOfCode": "class TripLike(Creation, UIID):\n    trip = models.ForeignKey(Trip, related_name = 'trip_likes', on_delete = models.CASCADE)\n    user = models.ForeignKey(User, related_name = 'liked_trips', to_field = 'email', on_delete = models.CASCADE)\n    status = models.CharField(max_length = 10, choices = LIKE_CHOICES, default = 'like')\nclass TripComment(Creation, UIID):\n    trip = models.ForeignKey(Trip, related_name = 'trip_comments', on_delete = models.CASCADE)\n    user = models.ForeignKey(User, related_name = 'commented_trips', to_field = 'email', on_delete = models.CASCADE)\n    comment = models.TextField()\nclass TripReplyComment(Creation, UIID):\n    comment = models.ForeignKey(TripComment, related_name = 'trip_comments_replies', on_delete = models.CASCADE)",
        "detail": "Trips.models",
        "documentation": {}
    },
    {
        "label": "TripComment",
        "kind": 6,
        "importPath": "Trips.models",
        "description": "Trips.models",
        "peekOfCode": "class TripComment(Creation, UIID):\n    trip = models.ForeignKey(Trip, related_name = 'trip_comments', on_delete = models.CASCADE)\n    user = models.ForeignKey(User, related_name = 'commented_trips', to_field = 'email', on_delete = models.CASCADE)\n    comment = models.TextField()\nclass TripReplyComment(Creation, UIID):\n    comment = models.ForeignKey(TripComment, related_name = 'trip_comments_replies', on_delete = models.CASCADE)\n    reply_comment = models.ForeignKey(TripComment, related_name = 'replied_comments', on_delete = models.CASCADE)\nclass TripRequest(Creation, UIID):\n    trip = models.ForeignKey(Trip, related_name = 'trip_requests', on_delete = models.CASCADE)\n    user = models.ForeignKey(User, related_name = 'requested_trips', to_field = 'email', on_delete = models.CASCADE)",
        "detail": "Trips.models",
        "documentation": {}
    },
    {
        "label": "TripReplyComment",
        "kind": 6,
        "importPath": "Trips.models",
        "description": "Trips.models",
        "peekOfCode": "class TripReplyComment(Creation, UIID):\n    comment = models.ForeignKey(TripComment, related_name = 'trip_comments_replies', on_delete = models.CASCADE)\n    reply_comment = models.ForeignKey(TripComment, related_name = 'replied_comments', on_delete = models.CASCADE)\nclass TripRequest(Creation, UIID):\n    trip = models.ForeignKey(Trip, related_name = 'trip_requests', on_delete = models.CASCADE)\n    user = models.ForeignKey(User, related_name = 'requested_trips', to_field = 'email', on_delete = models.CASCADE)\n    is_accepted = models.BooleanField(default=False)",
        "detail": "Trips.models",
        "documentation": {}
    },
    {
        "label": "TripRequest",
        "kind": 6,
        "importPath": "Trips.models",
        "description": "Trips.models",
        "peekOfCode": "class TripRequest(Creation, UIID):\n    trip = models.ForeignKey(Trip, related_name = 'trip_requests', on_delete = models.CASCADE)\n    user = models.ForeignKey(User, related_name = 'requested_trips', to_field = 'email', on_delete = models.CASCADE)\n    is_accepted = models.BooleanField(default=False)",
        "detail": "Trips.models",
        "documentation": {}
    },
    {
        "label": "TripSerializer",
        "kind": 6,
        "importPath": "Trips.serializers",
        "description": "Trips.serializers",
        "peekOfCode": "class TripSerializer(serializers.ModelSerializer):\n    def __init__(self, *args, **kwargs):\n        # Extract the context from the keyword arguments\n        context = kwargs.get('context', None)\n        # Call the super constructor\n        super().__init__(*args, **kwargs)\n        # Pass the context to the nested serializer\n        if context:\n            self.fields['trip_user'] = UserFullDetailsSerializer(read_only = True, context=context)\n    trip_user = UserFullDetailsSerializer(read_only = True)",
        "detail": "Trips.serializers",
        "documentation": {}
    },
    {
        "label": "TripLikeSerializer",
        "kind": 6,
        "importPath": "Trips.serializers",
        "description": "Trips.serializers",
        "peekOfCode": "class TripLikeSerializer(serializers.ModelSerializer):\n    def __init__(self, *args, **kwargs):\n        # Extract the context from the keyword arguments\n        context = kwargs.get('context', None)\n        # Call the super constructor\n        super().__init__(*args, **kwargs)\n        # Pass the context to the nested serializer\n        if context:\n            self.fields['user'] = UserFullDetailsSerializer(context=context)\n    user = UserFullDetailsSerializer(read_only = True)",
        "detail": "Trips.serializers",
        "documentation": {}
    },
    {
        "label": "TripCommentSerializer",
        "kind": 6,
        "importPath": "Trips.serializers",
        "description": "Trips.serializers",
        "peekOfCode": "class TripCommentSerializer(serializers.ModelSerializer):\n    def __init__(self, *args, **kwargs):\n        # Extract the context from the keyword arguments\n        context = kwargs.get('context', None)\n        # Call the super constructor\n        super().__init__(*args, **kwargs)\n        # Pass the context to the nested serializer\n        if context:\n            self.fields['user'] = UserFullDetailsSerializer(context=context)\n    replies = serializers.SerializerMethodField(read_only = True)",
        "detail": "Trips.serializers",
        "documentation": {}
    },
    {
        "label": "TripRequestSerializer",
        "kind": 6,
        "importPath": "Trips.serializers",
        "description": "Trips.serializers",
        "peekOfCode": "class TripRequestSerializer(serializers.ModelSerializer):\n    def __init__(self, *args, **kwargs):\n        # Extract the context from the keyword arguments\n        context = kwargs.get('context', None)\n        # Call the super constructor\n        super().__init__(*args, **kwargs)\n        # Pass the context to the nested serializer\n        if context:\n            self.fields['user'] = UserFullDetailsSerializer(context=context)\n    user = UserFullDetailsSerializer(read_only = True)",
        "detail": "Trips.serializers",
        "documentation": {}
    },
    {
        "label": "create_like_ping",
        "kind": 2,
        "importPath": "Trips.signals",
        "description": "Trips.signals",
        "peekOfCode": "def create_like_ping(instance, **kwargs):\n    trip = instance.trip\n    status = instance.status\n    Ping.objects.create(\n        user = trip.user,\n        user_by = instance.user,\n        redirect_path = 'p',\n        label = f\"{instance.user.user_details.nick_name} {'Liked' if status == 'like' else 'Disliked'} your '{trip.title}' trip\"\n    )\n@receiver(post_save, sender=TripComment)",
        "detail": "Trips.signals",
        "documentation": {}
    },
    {
        "label": "create_comment_ping",
        "kind": 2,
        "importPath": "Trips.signals",
        "description": "Trips.signals",
        "peekOfCode": "def create_comment_ping(instance, **kwargs):\n    trip = instance.trip\n    Ping.objects.create(\n        user = trip.user,\n        user_by = instance.user,\n        redirect_path = 'p',\n        label = f\"{instance.user.user_details.nick_name} Commented on your '{trip.title}' trip\"\n    )\n@receiver(post_save, sender=TripRequest)\ndef create_comment_ping(instance, created, **kwargs):",
        "detail": "Trips.signals",
        "documentation": {}
    },
    {
        "label": "create_comment_ping",
        "kind": 2,
        "importPath": "Trips.signals",
        "description": "Trips.signals",
        "peekOfCode": "def create_comment_ping(instance, created, **kwargs):\n    if created:\n        trip = instance.trip\n        Ping.objects.create(\n            user = trip.user,\n            user_by = instance.user,\n            redirect_path = 'p',\n            label = f\"{instance.user.user_details.nick_name} Requested to join your '{trip.title}' trip\"\n        )    \n@receiver(post_save, sender=TripRequest)",
        "detail": "Trips.signals",
        "documentation": {}
    },
    {
        "label": "create_comment_ping",
        "kind": 2,
        "importPath": "Trips.signals",
        "description": "Trips.signals",
        "peekOfCode": "def create_comment_ping(instance, created, **kwargs):\n    if not created:\n        trip = instance.trip\n        requested_user = instance.user\n        Ping.objects.create(\n            user = requested_user,\n            user_by = trip.user,\n            redirect_path = 'p',\n            label = f\"{trip.user.user_details.nick_name}, has accepted your request to join '{trip.title}' trip.\"\n        )",
        "detail": "Trips.signals",
        "documentation": {}
    },
    {
        "label": "informing_trip_cancel_to_connected_users",
        "kind": 2,
        "importPath": "Trips.signals",
        "description": "Trips.signals",
        "peekOfCode": "def informing_trip_cancel_to_connected_users(instance, **kwargs):\n    trip = instance.trip\n    Ping.objects.create(\n        user = instance.user,\n        user_by = trip.user,\n        redirect_path = '/',\n        label = f\"{trip.user.user_details.nick_name}, was rejected your '{trip.title}' trip request. We apologize for any inconvenience caused.\"\n    )\n@receiver(pre_delete, sender=Trip)\ndef informing_trip_cancel_to_connected_users(instance, **kwargs):",
        "detail": "Trips.signals",
        "documentation": {}
    },
    {
        "label": "informing_trip_cancel_to_connected_users",
        "kind": 2,
        "importPath": "Trips.signals",
        "description": "Trips.signals",
        "peekOfCode": "def informing_trip_cancel_to_connected_users(instance, **kwargs):\n    for connected_user in instance.connected_users:\n        Ping.objects.create(\n            user = connected_user,\n            user_by = instance.user,\n            redirect_path = '/',\n            label = f\"Hi {connected_user.user.user_details.nick_name}, our '{instance.trip.title}' trip has been cancelled due to some reasons. We apologize for any inconvenience caused.\"\n        )",
        "detail": "Trips.signals",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "Trips.urls",
        "description": "Trips.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register('trips', TripViewSet)\nurlpatterns = [\n    path('', include(router.urls)),\n    path('trips/likes/<pk>', TripLikeView.as_view()),\n    path('trips/comments/<pk>', TripCommentView.as_view()),\n    path('trips/requests/<pk>', TripRequestView.as_view()),\n    path('trips/requests/accept-reject/<request_pk>', TripRequestAcceptRejectView.as_view()),\n    path('trips/meta/categories', TripCategoriesView.as_view()),\n]",
        "detail": "Trips.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "Trips.urls",
        "description": "Trips.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include(router.urls)),\n    path('trips/likes/<pk>', TripLikeView.as_view()),\n    path('trips/comments/<pk>', TripCommentView.as_view()),\n    path('trips/requests/<pk>', TripRequestView.as_view()),\n    path('trips/requests/accept-reject/<request_pk>', TripRequestAcceptRejectView.as_view()),\n    path('trips/meta/categories', TripCategoriesView.as_view()),\n]",
        "detail": "Trips.urls",
        "documentation": {}
    },
    {
        "label": "TripViewSet",
        "kind": 6,
        "importPath": "Trips.views",
        "description": "Trips.views",
        "peekOfCode": "class TripViewSet(viewsets.ModelViewSet):\n    queryset = Trip.objects.all()\n    serializer_class = TripSerializer\n    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]\n    filterset_fields = {\n        'distance': ['gte', 'lte'],\n        'address_from': ['exact', 'icontains'],  \n        'address_to': ['exact', 'icontains'],  \n        'category': ['exact', 'icontains'],  \n        'date': ['gte', 'lte'], ",
        "detail": "Trips.views",
        "documentation": {}
    },
    {
        "label": "TripCategoriesView",
        "kind": 6,
        "importPath": "Trips.views",
        "description": "Trips.views",
        "peekOfCode": "class TripCategoriesView(RetrieveAPIView):\n    queryset = Trip.objects.all()\n    serializer_class = TripSerializer\n    def get(self, request):\n        categories = []\n        for category_slug, category_name in dict(TRIP_CATEGORIES).items():\n            categories.append({\n                'label': category_name,\n                'value': category_slug,\n            })",
        "detail": "Trips.views",
        "documentation": {}
    },
    {
        "label": "TripLikeView",
        "kind": 6,
        "importPath": "Trips.views",
        "description": "Trips.views",
        "peekOfCode": "class TripLikeView(RetrieveAPIView, UpdateAPIView):\n    serializer_class = TripLikeSerializer\n    queryset = TripLike.objects.all()\n    def retrieve(self, request, pk):\n        trip = Trip.objects.get(pk = pk)\n        likes = trip.trip_likes.all()\n        if likes.count() == 0:\n            return Response([])\n        data = self.get_serializer(likes).data\n        return Response(data)",
        "detail": "Trips.views",
        "documentation": {}
    },
    {
        "label": "TripCommentView",
        "kind": 6,
        "importPath": "Trips.views",
        "description": "Trips.views",
        "peekOfCode": "class TripCommentView(ListCreateAPIView):\n    serializer_class = TripCommentSerializer\n    queryset = TripComment.objects.all()         \n    def get(self, request, pk):\n        trip = Trip.objects.get(pk=pk)\n        comments = trip.trip_comments.all()\n        data = self.get_serializer(comments, many = True).data \n        return Response(data, 200)     \n    def post(self, request, pk):\n        trip = Trip.objects.get(pk=pk)",
        "detail": "Trips.views",
        "documentation": {}
    },
    {
        "label": "TripRequestView",
        "kind": 6,
        "importPath": "Trips.views",
        "description": "Trips.views",
        "peekOfCode": "class TripRequestView(ListCreateAPIView):\n    serializer_class = TripRequestSerializer\n    queryset = TripRequest.objects.all()         \n    def get(self, request, pk):\n        trip = Trip.objects.get(pk=pk)\n        requests = trip.trip_requests.filter(is_accepted=False)\n        data = self.get_serializer(requests, many = True).data \n        return Response(data, 200)     \n    def post(self, request, pk):\n        trip = Trip.objects.get(pk=pk)",
        "detail": "Trips.views",
        "documentation": {}
    },
    {
        "label": "TripRequestAcceptRejectView",
        "kind": 6,
        "importPath": "Trips.views",
        "description": "Trips.views",
        "peekOfCode": "class TripRequestAcceptRejectView(UpdateAPIView):\n    serializer_class = TripRequestSerializer\n    queryset = TripRequest.objects.all()    \n    def update(self, request, request_pk):\n        action = request.data.get('action')\n        trip_request = self.get_queryset().get(pk = request_pk)\n        if action:\n            trip_request.is_accepted = True\n            trip_request.trip.connected_users.add(trip_request.user)\n            trip_request.save()",
        "detail": "Trips.views",
        "documentation": {}
    },
    {
        "label": "UserTripsView",
        "kind": 6,
        "importPath": "Trips.views",
        "description": "Trips.views",
        "peekOfCode": "class UserTripsView(ListAPIView):\n    serializer_class = TripSerializer\n    def get(self, request, email):\n        current_datetime = datetime.datetime.now()\n        user = User.objects.get(email=email)\n        upcoming_trips = user.user_trips.filter(\n            Q(date__gt=current_datetime.date()) | \n            (Q(date=current_datetime.date()) & Q(time__gt=current_datetime.time()))\n        )\n        completed_trips = user.user_trips.filter(",
        "detail": "Trips.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "Users.migrations.0001_initial",
        "description": "Users.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='User',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('password', models.CharField(max_length=128, verbose_name='password')),",
        "detail": "Users.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "Users.migrations.0002_alter_userdetail_user",
        "description": "Users.migrations.0002_alter_userdetail_user",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('Users', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='userdetail',\n            name='user',\n            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_details', to=settings.AUTH_USER_MODEL, to_field='email'),\n        ),",
        "detail": "Users.migrations.0002_alter_userdetail_user",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "Users.migrations.0003_follow",
        "description": "Users.migrations.0003_follow",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('Users', '0002_alter_userdetail_user'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Follow',\n            fields=[\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('uiid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),",
        "detail": "Users.migrations.0003_follow",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "Users.migrations.0004_userstatus",
        "description": "Users.migrations.0004_userstatus",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('Users', '0003_follow'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='UserStatus',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('status', models.CharField(max_length=50)),",
        "detail": "Users.migrations.0004_userstatus",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "Users.migrations.0005_remove_userstatus_status_userstatus_is_online",
        "description": "Users.migrations.0005_remove_userstatus_status_userstatus_is_online",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('Users', '0004_userstatus'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='userstatus',\n            name='status',\n        ),\n        migrations.AddField(",
        "detail": "Users.migrations.0005_remove_userstatus_status_userstatus_is_online",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "Users.migrations.0006_rename_lost_lagin_userstatus_logout_at",
        "description": "Users.migrations.0006_rename_lost_lagin_userstatus_logout_at",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('Users', '0005_remove_userstatus_status_userstatus_is_online'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='userstatus',\n            old_name='lost_lagin',\n            new_name='logout_at',\n        ),",
        "detail": "Users.migrations.0006_rename_lost_lagin_userstatus_logout_at",
        "documentation": {}
    },
    {
        "label": "UsersConfig",
        "kind": 6,
        "importPath": "Users.apps",
        "description": "Users.apps",
        "peekOfCode": "class UsersConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'Users'\n    def ready(self):\n        from . import signals",
        "detail": "Users.apps",
        "documentation": {}
    },
    {
        "label": "UserStatusConsumer",
        "kind": 6,
        "importPath": "Users.consumers",
        "description": "Users.consumers",
        "peekOfCode": "class UserStatusConsumer(BaseAsyncJsonWebsocketConsumer):\n    groups = []\n    async def connect(self):\n        if await self.user_connect():\n            await self.change_user_status('add')\n            await self.send_user_status()\n    async def receive_json(self, content, **kwargs):\n        await self.send_json(content)\n    @database_sync_to_async\n    def get_user_status_data(self):",
        "detail": "Users.consumers",
        "documentation": {}
    },
    {
        "label": "UserManager",
        "kind": 6,
        "importPath": "Users.manager",
        "description": "Users.manager",
        "peekOfCode": "class UserManager(BaseUserManager):\n    def create_user(self, email, password=None, **extra_fields):\n        if not email:\n            raise ValueError('The Email field must be set')\n        email = self.normalize_email(email)\n        user = self.model(email=email, **extra_fields)\n        user.set_password(password)\n        user.save(using=self._db)\n        return user\n    def create_superuser(self, email, password=None, **extra_fields):",
        "detail": "Users.manager",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "Users.models",
        "description": "Users.models",
        "peekOfCode": "class User(AbstractBaseUser, PermissionsMixin):\n    email = models.EmailField(unique=True)\n    is_active = models.BooleanField(default=True)\n    is_staff = models.BooleanField(default=False)\n    objects = UserManager()\n    groups = None\n    user_permissions = None\n    first_name = None\n    last_name = None\n    username = None",
        "detail": "Users.models",
        "documentation": {}
    },
    {
        "label": "UserStatus",
        "kind": 6,
        "importPath": "Users.models",
        "description": "Users.models",
        "peekOfCode": "class UserStatus(models.Model):\n    user = models.OneToOneField(User, related_name = 'user_status', to_field = 'email', on_delete = models.CASCADE)\n    is_online = models.BooleanField(default=False)\n    logout_at = models.DateTimeField(auto_now = True)    \nclass UserDetail(Creation):\n    user = models.OneToOneField(User, related_name = 'user_details', to_field = 'email', on_delete = models.CASCADE)\n    nick_name = models.CharField(max_length=50, null=True, blank=True)\n    phone_no = models.CharField(max_length=10, null=True, blank=True)\n    bio = models.TextField()\n    gender = models.CharField(default = 'male' ,max_length=20)",
        "detail": "Users.models",
        "documentation": {}
    },
    {
        "label": "UserDetail",
        "kind": 6,
        "importPath": "Users.models",
        "description": "Users.models",
        "peekOfCode": "class UserDetail(Creation):\n    user = models.OneToOneField(User, related_name = 'user_details', to_field = 'email', on_delete = models.CASCADE)\n    nick_name = models.CharField(max_length=50, null=True, blank=True)\n    phone_no = models.CharField(max_length=10, null=True, blank=True)\n    bio = models.TextField()\n    gender = models.CharField(default = 'male' ,max_length=20)\n    profile_pic = models.ImageField(upload_to='profiles', null=True, blank=True, validators=[validate_image_dimensions, validate_image_size])\n    followers = models.PositiveIntegerField(default=0, null=True, blank=True)\n    following = models.PositiveIntegerField(default=0, null=True, blank=True)\n    trips = models.PositiveIntegerField(default=0, null=True, blank = True)",
        "detail": "Users.models",
        "documentation": {}
    },
    {
        "label": "Follow",
        "kind": 6,
        "importPath": "Users.models",
        "description": "Users.models",
        "peekOfCode": "class Follow(Creation, UIID):\n    user = models.ForeignKey(User, related_name = 'user_followers', to_field = 'email', on_delete = models.CASCADE)\n    follower = models.ForeignKey(User, related_name = 'user_followings', to_field = 'email', on_delete = models.CASCADE)",
        "detail": "Users.models",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "kind": 6,
        "importPath": "Users.serializers",
        "description": "Users.serializers",
        "peekOfCode": "class UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        exclude = ['password']\nclass UserStatusSerializer(serializers.ModelSerializer):\n    logout_at = serializers.SerializerMethodField(read_only = True)\n    def get_logout_at(self,obj):\n        return humanize.naturaltime(obj.logout_at)\n    class Meta:\n        model = UserStatus",
        "detail": "Users.serializers",
        "documentation": {}
    },
    {
        "label": "UserStatusSerializer",
        "kind": 6,
        "importPath": "Users.serializers",
        "description": "Users.serializers",
        "peekOfCode": "class UserStatusSerializer(serializers.ModelSerializer):\n    logout_at = serializers.SerializerMethodField(read_only = True)\n    def get_logout_at(self,obj):\n        return humanize.naturaltime(obj.logout_at)\n    class Meta:\n        model = UserStatus\n        exclude = ['id']\nclass UserLoginSerializer(serializers.Serializer):\n    email = serializers.EmailField(required=True)\n    password = serializers.CharField(required=True)",
        "detail": "Users.serializers",
        "documentation": {}
    },
    {
        "label": "UserLoginSerializer",
        "kind": 6,
        "importPath": "Users.serializers",
        "description": "Users.serializers",
        "peekOfCode": "class UserLoginSerializer(serializers.Serializer):\n    email = serializers.EmailField(required=True)\n    password = serializers.CharField(required=True)\n    def create(self, validated_data):\n        email = validated_data.get('email')\n        password = validated_data.get('password')\n        # Authenticate the user\n        user = authenticate(email=email, password=password)\n        if user is None:\n            raise serializers.ValidationError('Invalid email or password.')",
        "detail": "Users.serializers",
        "documentation": {}
    },
    {
        "label": "UserDetailSerializer",
        "kind": 6,
        "importPath": "Users.serializers",
        "description": "Users.serializers",
        "peekOfCode": "class UserDetailSerializer(serializers.ModelSerializer):\n    created_at = serializers.DateTimeField(format='%B %Y', read_only=True)\n    is_follower_to_current_user = serializers.SerializerMethodField(read_only=True)\n    is_following_by_current_user = serializers.SerializerMethodField(read_only=True)\n    def get_is_following_by_current_user(self, obj):\n        try:\n            current_user = self.context['request'].user\n            user = obj.user\n            return user.user_followers.filter(follower = current_user).exists()\n        except:",
        "detail": "Users.serializers",
        "documentation": {}
    },
    {
        "label": "UserRegisterSerializer",
        "kind": 6,
        "importPath": "Users.serializers",
        "description": "Users.serializers",
        "peekOfCode": "class UserRegisterSerializer(serializers.ModelSerializer):\n    password = serializers.CharField(write_only=True)\n    class Meta:\n        model = User\n        fields = ['email', 'password']\n    def create(self, validated_data):\n        password = validated_data.pop('password')\n        user = User.objects.create(**validated_data)\n        UserStatus.objects.create(user = user)\n        user.set_password(password)",
        "detail": "Users.serializers",
        "documentation": {}
    },
    {
        "label": "UserFullDetailsSerializer",
        "kind": 6,
        "importPath": "Users.serializers",
        "description": "Users.serializers",
        "peekOfCode": "class UserFullDetailsSerializer(serializers.ModelSerializer):\n    user_details = serializers.SerializerMethodField(read_only = True)\n    def get_user_details(self, obj):\n        user_details = obj.user_details\n        return UserDetailSerializer(user_details, context = self.context).data         \n    class Meta :\n        model = User\n        fields = ['email', 'user_details', ]\nclass FollowUnFollowSerializer(serializers.ModelSerializer):\n    user = UserFullDetailsSerializer()",
        "detail": "Users.serializers",
        "documentation": {}
    },
    {
        "label": "FollowUnFollowSerializer",
        "kind": 6,
        "importPath": "Users.serializers",
        "description": "Users.serializers",
        "peekOfCode": "class FollowUnFollowSerializer(serializers.ModelSerializer):\n    user = UserFullDetailsSerializer()\n    follower = UserFullDetailsSerializer()\n    class Meta :\n        model = Follow\n        fields = '__all__'",
        "detail": "Users.serializers",
        "documentation": {}
    },
    {
        "label": "get_tokens_for_user",
        "kind": 2,
        "importPath": "Users.serializers",
        "description": "Users.serializers",
        "peekOfCode": "def get_tokens_for_user(user):\n    refresh = RefreshToken.for_user(user)\n    return {\n        'refresh': str(refresh),\n        'access': str(refresh.access_token),\n    }\nclass UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        exclude = ['password']",
        "detail": "Users.serializers",
        "documentation": {}
    },
    {
        "label": "create_like_ping",
        "kind": 2,
        "importPath": "Users.signals",
        "description": "Users.signals",
        "peekOfCode": "def create_like_ping(instance, **kwargs):\n    Ping.objects.create(\n        user = instance.user,\n        user_by = instance.follower,\n        redirect_path = 'p',\n        label = f\"{instance.follower.user_details.nick_name} Started following you\"\n    )\n@receiver(pre_delete, sender=Follow)\ndef create_like_ping(instance, **kwargs):\n    Ping.objects.create(",
        "detail": "Users.signals",
        "documentation": {}
    },
    {
        "label": "create_like_ping",
        "kind": 2,
        "importPath": "Users.signals",
        "description": "Users.signals",
        "peekOfCode": "def create_like_ping(instance, **kwargs):\n    Ping.objects.create(\n        user = instance.user,\n        user_by = instance.follower,\n        redirect_path = 'p',\n        label = f\"{instance.follower.user_details.nick_name} Unfollowed you\"\n    )",
        "detail": "Users.signals",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "Users.urls",
        "description": "Users.urls",
        "peekOfCode": "urlpatterns = [\n    path('register', RegisterView.as_view()),\n    path('user_details', UserDetailAddView.as_view()),\n    path('login', LoginView.as_view()),\n    path('logout', TokenBlacklistView.as_view()),\n    path('token/refresh/', TokenRefreshView.as_view()),\n    ## follows and stats paths\n    path('follow-unfollow/<email>',FollowUnFollowView.as_view()),\n    path('user-stats-count/<email>', UserStatsCountView.as_view()),\n    path('user-followers/<email>', UserFollowersView.as_view()),",
        "detail": "Users.urls",
        "documentation": {}
    },
    {
        "label": "LoginView",
        "kind": 6,
        "importPath": "Users.views",
        "description": "Users.views",
        "peekOfCode": "class LoginView(CreateAPIView):\n    serializer_class = UserLoginSerializer\n    queryset = User.objects.all()\n    authentication_classes = []\n    def create(self, request, *args, **kwargs):\n        serializer = self.get_serializer(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        user_data = serializer.save()\n        return Response(user_data, status=status.HTTP_200_OK)\nclass RegisterView(CreateAPIView):",
        "detail": "Users.views",
        "documentation": {}
    },
    {
        "label": "RegisterView",
        "kind": 6,
        "importPath": "Users.views",
        "description": "Users.views",
        "peekOfCode": "class RegisterView(CreateAPIView):\n    serializer_class = UserRegisterSerializer\n    queryset = User.objects.all()\n    authentication_classes = []\nclass UserDetailAddView(CreateAPIView):\n    authentication_classes = []\n    queryset = UserDetail.objects.all()\n    serializer_class = UserDetailSerializer\nclass FollowUnFollowView(UpdateAPIView):\n    queryset = Follow.objects.all()",
        "detail": "Users.views",
        "documentation": {}
    },
    {
        "label": "UserDetailAddView",
        "kind": 6,
        "importPath": "Users.views",
        "description": "Users.views",
        "peekOfCode": "class UserDetailAddView(CreateAPIView):\n    authentication_classes = []\n    queryset = UserDetail.objects.all()\n    serializer_class = UserDetailSerializer\nclass FollowUnFollowView(UpdateAPIView):\n    queryset = Follow.objects.all()\n    serializer_class = FollowUnFollowSerializer\n    def update(self, request, email):\n        user = User.objects.get(email=email)\n        follower = request.user",
        "detail": "Users.views",
        "documentation": {}
    },
    {
        "label": "FollowUnFollowView",
        "kind": 6,
        "importPath": "Users.views",
        "description": "Users.views",
        "peekOfCode": "class FollowUnFollowView(UpdateAPIView):\n    queryset = Follow.objects.all()\n    serializer_class = FollowUnFollowSerializer\n    def update(self, request, email):\n        user = User.objects.get(email=email)\n        follower = request.user\n        try: \n            Follow.objects.get().delete()\n        except Follow.DoesNotExist:\n            Follow.objects.create(user=user, follower=follower)",
        "detail": "Users.views",
        "documentation": {}
    },
    {
        "label": "UserStatsCountView",
        "kind": 6,
        "importPath": "Users.views",
        "description": "Users.views",
        "peekOfCode": "class UserStatsCountView(APIView):\n    def get_is_following_by_current_user(self, request, user):\n        current_user = request.user\n        return user.user_followers.filter(follower = current_user).exists()\n    def get_is_follower_to_current_user(self, request, user):\n        current_user = request.user\n        return current_user.user_followers.filter(follower = user).exists()\n    def get(self, request, email):\n        if email is None or email == '':\n            user = request.user",
        "detail": "Users.views",
        "documentation": {}
    },
    {
        "label": "UserFollowersView",
        "kind": 6,
        "importPath": "Users.views",
        "description": "Users.views",
        "peekOfCode": "class UserFollowersView(APIView):\n    def get(self, request, email):\n        if email is None:\n            user = request.user\n        user = User.objects.get(email=email)\n        followers = user.user_followers.all()\n        data = FollowUnFollowSerializer(followers, many = True).data,\n        return Response(data, 200)\nclass UserFollowingsView(APIView):\n    def get(self, request, email):",
        "detail": "Users.views",
        "documentation": {}
    },
    {
        "label": "UserFollowingsView",
        "kind": 6,
        "importPath": "Users.views",
        "description": "Users.views",
        "peekOfCode": "class UserFollowingsView(APIView):\n    def get(self, request, email):\n        if email is None:\n            user = request.user\n        user = User.objects.get(email=email)\n        followings = user.user_followings.all()\n        data = FollowUnFollowSerializer(followings, many = True).data,\n        return Response(data, 200)",
        "detail": "Users.views",
        "documentation": {}
    },
    {
        "label": "WsAuthMiddleware",
        "kind": 6,
        "importPath": "Users.ws_auth_middleware",
        "description": "Users.ws_auth_middleware",
        "peekOfCode": "class WsAuthMiddleware:\n    def __init__(self, app):\n        self.app = app\n    async def authenticate(self, scope):\n        query_string = scope.get('query_string', None)\n        if not query_string or query_string == '':\n            return None\n        try:\n            token = query_string.decode('utf-8').strip().split('=')[1]\n            access_token = AccessToken(token)",
        "detail": "Users.ws_auth_middleware",
        "documentation": {}
    },
    {
        "label": "get_user",
        "kind": 2,
        "importPath": "Users.ws_auth_middleware",
        "description": "Users.ws_auth_middleware",
        "peekOfCode": "def get_user(email):\n    try:\n        return User.objects.get(email=email)\n    except User.DoesNotExist:\n        return None\nclass WsAuthMiddleware:\n    def __init__(self, app):\n        self.app = app\n    async def authenticate(self, scope):\n        query_string = scope.get('query_string', None)",
        "detail": "Users.ws_auth_middleware",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'travelmatesb.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]